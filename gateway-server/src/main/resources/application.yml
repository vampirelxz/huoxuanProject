# 端口
server:
  port: 2001

eureka:
  instance:
    # 使用 ip 代替实例名
    prefer-ip-address: true
    # 实例的主机名
    hostname: ${spring.cloud.client.ip-address}
    # 实例的 ID 规则
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
  client:
    serviceUrl:
      # 注册中心地址
      defaultZone: http://${eureka.instance.hostname}:1001/eureka/

logging:
  level:
    # log 级别
    org.springframework.cloud.gateway: debug

spring:
  profiles:
    # 指定配置
    # route_simple：简单尝试
    # route_stripPrefix：截取请求
    # route_uri：转发指定地址并传入参数
    # route_addRequestParameter：转发指定服务并传入参数
    # route_hystrix：熔断
    # route_requestRateLimiter：限流
    # route_all：综合
    active: route_all
#
#  cloud:
#    # CORS配置
#    globalcors:
#      cors-configurations:
#        '[/**]':
#          allowedOrigins: "*"
#          allowedMethods:
#            - GET
#            - HEAD
#            - POST
#            - PUT
#            - DELETE
#            - TRACE
#            - OPTIONS
#            - PATCH
#          allowedHeaders: "*"

#jwt生成密钥
jwt:
  secret:
    key: xuanzhi

  #token黑名单 存储key

  blacklist:
    key:
      format: JWT_BLACKLIST::%s

  #不进行token拦截
auth:
  skip:
    urls: /user/auth,/user/token/refresh,/user/login,/login.html,/static


---

spring:
  # 配置文件名称，用来标识不同环境的配置。由 spring.profiles.active 的值来决定使用哪组配置。
  ## 综合
  profiles: route_all
  redis:
    host: localhost
    port: 6379
    database: 0
  application:
    # 应用名称
    name: gateway
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
      routes:
      # 路由标识（id：标识，具有唯一性）   预报
      - id: forecast
        # 目标服务地址（uri：地址，请求转发后的地址）
        uri: http://liuxuanzhi:1002/
        # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        predicates:
        ## 转发地址格式为 uri/routeAll，/all 部分会被下面的过滤器给截取掉
        - Path=/forecast/**
        ## 匹配 GET 请求
        - Method=GET
        # 过滤器（filters：过滤器，过滤规则）
        filters:
        ## 截取路径位数
        - StripPrefix=1
        ## 添加指定参数
        ## - AddRequestParameter=pass, yes
        ## 熔断
        - name: Hystrix
          args:
            name: fallbackcmd
            ### fallback 时调用的方法 http://localhost:8000/fallback
            fallbackUri: forward:/fallback
            timeout:
              #指定接口超时处理
              file-upload-convert: 8000
              file-upload-: 8000
              file-download-: 8000
              course-file-upload-local-: 8000
        ## 限流
        - name: RequestRateLimiter
          args:
            ### 限流过滤器的 Bean 名称
            key-resolver: '#{@uriKeyResolver}'
            ### 希望允许用户每秒处理多少个请求
            redis-rate-limiter.replenishRate: 3
            ### 用户允许在一秒钟内完成的最大请求数
            redis-rate-limiter.burstCapacity: 6

        ##股票财富
      - id: stock
        uri: http://liuxuanzhi:1003/
        predicates:
          - Path=/stock/**
          - Method=GET
        filters:
          - StripPrefix=1
          - name: Hystrix
            args:
              name: fallbackcmd
              fallbackUri: forward:/fallback
              timeout:
                file-upload-convert: 8000
                file-upload-: 8000
                file-download-: 8000
                course-file-upload-local-: 8000
          - name: RequestRateLimiter
            args:
              key-resolver: '#{@uriKeyResolver}'
              redis-rate-limiter.replenishRate: 1
              redis-rate-limiter.burstCapacity: 1

      ##新闻
      - id: news
        uri: http://liuxuanzhi:1004/
        predicates:
          - Path=/new/**
          - Method=GET
        filters:
          - StripPrefix=1
          - name: Hystrix
            args:
              name: fallbackcmd
              fallbackUri: forward:/fallback
              timeout:
                file-upload-convert: 8000
                file-upload-: 8000
                file-download-: 8000
                course-file-upload-local-: 8000
          - name: RequestRateLimiter
            args:
              key-resolver: '#{@uriKeyResolver}'
              redis-rate-limiter.replenishRate: 1
              redis-rate-limiter.burstCapacity: 1

        ##生活工具
      - id: lifetools
        uri: http://liuxuanzhi:1005/
        predicates:
          - Path=/lifetools/**
          - Method=GET,POST
        filters:
          - StripPrefix=1
          - name: Hystrix
            args:
              name: fallbackcmd
              fallbackUri: forward:/fallback
              timeout:
                file-upload-convert: 8000
                file-upload-: 8000
                file-download-: 8000
                course-file-upload-local-: 8000
          - name: RequestRateLimiter
            args:
              key-resolver: '#{@uriKeyResolver}'
              redis-rate-limiter.replenishRate: 1
              redis-rate-limiter.burstCapacity: 3

        ##用户信息
      - id: user
        uri: http://liuxuanzhi:1006/
        predicates:
          - Path=/user/**

        filters:
          - StripPrefix=1
          - name: Hystrix
            args:
              name: fallbackcmd
              fallbackUri: forward:/fallback
              timeout:
                file-upload-convert: 8000
                file-upload-: 8000
                file-download-: 8000
                course-file-upload-local-: 8000
          - name: RequestRateLimiter
            args:
              key-resolver: '#{@uriKeyResolver}'
              redis-rate-limiter.replenishRate: 1
              redis-rate-limiter.burstCapacity: 3

        ##前端
      - id: webui
        uri: http://liuxuanzhi:80/
        predicates:
          - Path=/**,/static/**,/resources/*

        filters:
          - StripPrefix=1
          - name: Hystrix
            args:
              name: fallbackcmd
              fallbackUri: forward:/fallback
              timeout:
                file-upload-convert: 8000
                file-upload-: 8000
                file-download-: 8000
                course-file-upload-local-: 8000
          - name: RequestRateLimiter
            args:
              key-resolver: '#{@uriKeyResolver}'
              redis-rate-limiter.replenishRate: 1
              redis-rate-limiter.burstCapacity: 3

# 暴露端点
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
